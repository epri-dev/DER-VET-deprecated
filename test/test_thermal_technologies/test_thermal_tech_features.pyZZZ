"""
Copyright (c) 2021, Electric Power Research Institute

 All rights reserved.

 Redistribution and use in source and binary forms, with or without modification,
 are permitted provided that the following conditions are met:

     * Redistributions of source code must retain the above copyright notice,
       this list of conditions and the following disclaimer.
     * Redistributions in binary form must reproduce the above copyright notice,
       this list of conditions and the following disclaimer in the documentation
       and/or other materials provided with the distribution.
     * Neither the name of DER-VET nor the names of its contributors
       may be used to endorse or promote products derived from this software
       without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""
"""
This file tests analysis cases that ONLY contain a SINGLE BATTERY. It is
organized by value stream combination and tests a bariety of optimization
horizons, time scale sizes, and other scenario options. All tests should pass.

The tests in this file can be run with DERVET and StorageVET, so make sure to
update TEST_PROGRAM with the lower case string name of the program that you
would like the tests to run on.

"""
import pytest
from pathlib import Path
import numpy as np
import numpy.testing as npt
from test.TestingLib import *


DIR = Path("./test/test_thermal_technologies/model_params")
JSON = '.json'
CSV = '.csv'


def test_thermal_001():
    test_file = DIR / f'001-EBoiler_EChiller{CSV}'
    results_instance = assert_ran(test_file)
    results = results_instance.instances[0]
    ts = results.time_series_data

    # load dump should not exist
    assert_usecase_considered_services(results, ['retailTimeShift'])
    assert_timeseries_columns_do_not_exist(ts, ['Load Dump (kW)'])
    assert_timeseries_columns_are_all_zeroes(ts, ['Net Thermal Cooling Load (kW)'])
    assert_timeseries_col1_ge_col2(ts, 'Total Thermal Hot Water Generation (kW)', 'Total Thermal Hot Water Load (kW)')
    assert_timeseries_col1_ge_col2(ts, 'Total Thermal Steam Generation (kW)', 'Total Thermal Steam Load (kW)')

def test_thermal_002():
    test_file = DIR / f'002-EBoiler_EChiller_LoadDump_MaxExport{CSV}'
    results_instance = assert_ran(test_file)
    results = results_instance.instances[0]
    ts = results.time_series_data

    # load dump should have positive values
    assert_usecase_considered_services(results, ['retailTimeShift'])
    assert_timeseries_columns_exist(ts, ['Load Dump (kW)'])
    assert_timeseries_columns_have_positive_values(ts, ['Load Dump (kW)'])
    assert_timeseries_columns_are_all_zeroes(ts, ['Net Thermal Cooling Load (kW)'])
    assert_timeseries_col1_ge_col2(ts, 'Total Thermal Hot Water Generation (kW)', 'Total Thermal Hot Water Load (kW)')
    assert_timeseries_col1_ge_col2(ts, 'Total Thermal Steam Generation (kW)', 'Total Thermal Steam Load (kW)')

def test_thermal_003():
    test_file = DIR / f'003-EBoiler_EChiller_LoadDump_NoPOIConstraint{CSV}'
    results_instance = assert_ran(test_file)
    results = results_instance.instances[0]
    ts = results.time_series_data

    # load dump should be all zeroes
    assert_usecase_considered_services(results, ['retailTimeShift'])
    assert_timeseries_columns_exist(ts, ['Load Dump (kW)'])
    assert_timeseries_columns_are_all_zeroes(ts, ['Load Dump (kW)', 'Net Thermal Cooling Load (kW)'])
    assert_timeseries_col1_ge_col2(ts, 'Total Thermal Hot Water Generation (kW)', 'Total Thermal Hot Water Load (kW)')
    assert_timeseries_col1_ge_col2(ts, 'Total Thermal Steam Generation (kW)', 'Total Thermal Steam Load (kW)')

def test_thermal_004():
    test_file = DIR / f'004-EBoiler_EChiller_LoadDump_LargeMaxExport{CSV}'
    results_instance = assert_ran(test_file)
    results = results_instance.instances[0]
    ts = results.time_series_data

    # load dump should be all zeroes
    assert_usecase_considered_services(results, ['retailTimeShift'])
    assert_timeseries_columns_exist(ts, ['Load Dump (kW)'])
    assert_timeseries_columns_are_all_zeroes(ts, ['Load Dump (kW)', 'Net Thermal Cooling Load (kW)'])
    assert_timeseries_col1_ge_col2(ts, 'Total Thermal Hot Water Generation (kW)', 'Total Thermal Hot Water Load (kW)')
    assert_timeseries_col1_ge_col2(ts, 'Total Thermal Steam Generation (kW)', 'Total Thermal Steam Load (kW)')

def test_thermal_005():
    test_file = DIR / f'005-EBoiler_NGChiller_LoadDump_MaxExport{CSV}'
    results_instance = assert_ran(test_file)
    results = results_instance.instances[0]
    ts = results.time_series_data

    # load dump should have positive values
    assert_usecase_considered_services(results, ['retailTimeShift'])
    assert_timeseries_columns_exist(ts, ['Load Dump (kW)'])
    assert_timeseries_columns_have_positive_values(ts, ['Load Dump (kW)'])
    assert_timeseries_columns_are_all_zeroes(ts, ['Net Thermal Cooling Load (kW)'])
    # Total Load should equal Original Site Load
    assert_timeseries_columns_equal(ts, 'Total Load (kW)', 'LOAD: Site Load Original Load (kW)')
    assert_timeseries_col1_ge_col2(ts, 'Total Thermal Hot Water Generation (kW)', 'Total Thermal Hot Water Load (kW)')
    assert_timeseries_col1_ge_col2(ts, 'Total Thermal Steam Generation (kW)', 'Total Thermal Steam Load (kW)')

#class TestThermalCase:
#    """ Tests to ensure that thermal technologies funtion properly in DER-VET"""
#
#    def setup_class(self):
#        self.results = run_case(DIR / f"001-EBoiler_EChiller{CSV}")
#        self.results_instance = self.results.instances[0]
#        self.ts = self.results_instance.time_series_data
#
#    def test_services_are_active(self):
#        assert_usecase_considered_services(self.results, ['retailTimeShift'])
